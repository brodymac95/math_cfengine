##############################################################################
#
#   lib/main.cf - EECS library file for generic bundles 
#   Maintained: Ben Roose, ver 0.4
#
###############################################################################

# TESTING ONLY:INPUT STANDARD LIBRARY and HOST CLASSIFICATION (Remove after testing)
body file control
{
      inputs => { "$(sys.libdir)/stdlib.cf", };
}

######################################################################
# Public entry point: 
######################################################################

# NOTES for future development of configuration:
# 1. Make these bundles more generic and use direct input vars rather than "params"

######################################################################

bundle agent install_tarball_v2(source_path, source_server, local_directory)
# @description: generic bundle to copy .tar.gz archive tarball file from source_path on source_server and unroll in local_directory
# if 'web' is defined as source_server, then use wget to download the tarball file for a web address in source_path variable
# NEW VERSION 2
{
  vars:
      "tarball_file" string => lastnode( "$(source_path)", "/" );
      "tar_expand_cmd" string => "/bin/tar -xaf ";
      
  classes:
      "web"  expression => strcmp("$(source_server)","web");

      "tarball_is_present"
        expression => fileexists( "$(local_directory)/$(tarball_file)" );

      "local_dir_is_present"
        expression => fileexists( "$(local_directory)/." );

      # "unrolled_dir_is_present"
      #   expression => fileexists("$($(params)[_unrolled_dir])");

  files: 
      "$(local_directory)/."
    	create => "true",
        comment => "ensure the local directory exists";

      
    !web.!tarball_is_present.local_dir_is_present::
      "$(local_directory)/$(tarball_file)"
        copy_from => secure_cp( "$(source_path)", "$(source_server)" ),
        classes => results("bundle", "copied_file"),
        comment => "copy tarball file from cfengine source server";

    expanded_tarball_repaired::
      "$(local_directory)/$(tarball_file)"
        pathtype => "literal",
        delete => tidy,
        comment => "Remove the tarball after successful expansion";
      
  commands:
    web::
      "/usr/bin/wget -q --timeout=10 -O $(tarball_file) $(source_path)"
        contain => in_dir_shell("$(local_directory)"),
        classes => results("bundle", "downloaded_file"),
        comment => "download tarball file from web source path";


    tarball_is_present::
      "$(tar_expand_cmd)"
        args => "$(tarball_file)",
        contain => in_dir_shell( "$(local_directory)" ),
        classes => results("bundle", "expanded_tarball"),
        comment => "unrolling tarball in local directory";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    DEBUG|DEBUG_tarball::
      "=== $(this.bundle) ===";

      "Tarball file $(tarball_file) is locally available."
        ifvarclass => "tarball_is_present";

      "Tarball file $(tarball_file) is now uncompressed."
        ifvarclass => "expanded_tarball_repaired";

      "Failed to uncompress tarball file $(tarball_file)."
        ifvarclass => "expanded_tarball_failed";

      "Failed to copy tarball file $(tarball_file) from $(source_server)."
        ifvarclass => "copied_file_failed";

      "Failed to download tarball file $(tarball_file) from $(source_path)."
        ifvarclass => "downloaded_file_failed";
}

bundle agent install_tarball(params)
# @description: older form of bundle to download and unroll a .tar.gz archive file found on the policyhub
# still used by a few older bundles in manage/packages/custom_installs.cf
{
  classes:
      "tarball_is_present"
        expression => fileexists("$($(params)[_install_dir])$($(params)[_tarball])");

      "src_dir_is_present"
        expression => fileexists("$($(params)[_unrolled_dir])");

  files: 
    !tarball_is_present::
      "$($(params)[_install_dir])$($(params)[_tarball])"
        copy_from => secure_cp("$($(params)[_download_file])", "$($(params)[_download_server])"),
        comment => "Copying installer tarball from source server.";

  commands:
    tarball_is_present.!src_dir_is_present::
      "/bin/tar -xzf $($(params)[_tarball])"
        contain => in_dir_shell("$($(params)[_install_dir])"),
        comment => "Unrolling installer tarball to $($(params)[_install_dir])";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    DEBUG.tarball_is_present::
      "Installation tarball is on disk.";

    DEBUG.src_dir_is_present::
      "Installation unrolled/untarred directory is present.";
}

#############################################

body link_from hard_linkchildren(tofile)
{
# @Description: using the standard library linkchildren body, but tweak it to create hardlinks!
      source         => "$(tofile)";
      link_type      => "hardlink";
      when_no_source => "force";
      link_children  => "true";
      when_linking_children => "if_no_such_file"; # "override_file";
}

########################################################

bundle agent home_skel(user, group, mode, user_home, skel)
# @description: copies skeleton files to new user home path
{
  files:
      "$(user_home)/."
	create => "true",
	copy_from => seed_cp( $(skel) ),
	perms => mog("$(mode)", "$(user)", "$(group)"),
	depth_search => recurse_with_base( "inf" );

  reports:

    (DEBUG|DEBUG_home_skel)::
      "=== $(this.bundle) ===";
      "Creating $(user_home) for user and group: $(user):$(group)";
      "Using skeleton path: $(skel)";
}

########################################################


######################################################################
## UNUSED BUNDLES - NEED TO BE MADE GENERIC

# bundle agent installation_tidy(params)
# # @description: generic bundle to remove downloaded tar.gz files from a custom package install
# {
#   classes:
#       "install_dir_exists"  
#         expression => fileexists("$($(params)[_unrolled_dir])");

#       "tarball_exists"
#         expression => fileexists("$($(params)[_install_dir])$($(params)[_tarball])");

#   files:
#     install_dir_exists::
#       "$($(params)[_unrolled_dir])"
#         pathtype => "literal",
#         delete => tidy,
#         file_select => minutes_old(20),
#         depth_search => recurse("inf"),
#       #BEN: ADD RESULTS CLASS
#         comment => "Remove all files within $($(params)[_unrolled_dir]) created in last 20 minutes.";

#       "$($(params)[_unrolled_dir])"
#         pathtype => "literal",
#         delete => tidy,
#         file_select => minutes_old(20),
#         depth_search => include_base,
#         comment => "Remove the directory $($(params)[_unrolled_dir]).";

#     tarball_exists::
#       "$($(params)[_install_dir])$($(params)[_tarball])"
#         pathtype => "literal",
#         delete => tidy,
#         comment => "Remove $($(params)[_tarball]).";

#   reports:
#     (inform_mode|verbose_mode)::
#       "$(this.bundle): Activated";

#     DEBUG.(!install_dir_exists)::
#       "$(this.bundle): Removed installation files: $($(params)[_unrolled_dir])";

#     DEBUG.(!tarball_exists)::
#       "$(this.bundle): Removed installation files: $($(params)[_tarball])";

# }

# ######################################################################

# body file_select minutes_old(min)
# {
#       mtime       => irange(0,ago(0,0,0,0,"$(min)",0));
#       file_result => "mtime";
# }

# ######################################################################
