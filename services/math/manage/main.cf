###############################################################################
#
#   manage/main.cf - EECS management promises
#   Maintained: Ben Roose, ver 0.2
#
###############################################################################

bundle common manage_main_file_control
{
  vars:

#    "input[testing]" string => "$(this.promise_dirname)/iptables/testing.cf";

    #   "input[active_directory_auth]" string => "$(this.promise_dirname)/ad_auth/main.cf";
      # "input[autostart]" string => "$(this.promise_dirname)/autostart/main.cf";
    #   "input[ballast]" string => "$(this.promise_dirname)/ballast/main.cf";
    #   "input[emacs_server]" string => "$(this.promise_dirname)/emacs_server/main.cf";
    #   "input[fail2ban]" string => "$(this.promise_dirname)/fail2ban/main.cf";
      "input[guacamole_installer]" string => "$(this.promise_dirname)/guacamole/main.cf";
      "input[guacamole_database]" string => "$(this.promise_dirname)/guacamole/database.cf";
    #   "input[iptables]" string => "$(this.promise_dirname)/iptables/main.cf";
      "input[login_defaults]" string => "$(this.promise_dirname)/login_defaults/main.cf";
      "input[mail_server]" string => "$(this.promise_dirname)/mail_server/main.cf";
    #   "input[network]" string => "$(this.promise_dirname)/network/main.cf";
    #   "input[network file system]" string => "$(this.promise_dirname)/nfs/main.cf";
    #   "input[printers]" string => "$(this.promise_dirname)/printers/main.cf";
    #   "input[packages]" string => "$(this.promise_dirname)/packages/main.cf";
      "input[reboot]" string => "$(this.promise_dirname)/reboot/main.cf";
    #   "input[remote_desktop]" string => "$(this.promise_dirname)/remote_desktop/main.cf";
    #   "input[repositories]" string => "$(this.promise_dirname)/repositories/main.cf";
      "input[ssh]" string => "$(this.promise_dirname)/ssh/main.cf";
    #   "input[system_users]" string => "$(this.promise_dirname)/system_users/main.cf";
    #   "input[tftp]" string => "$(this.promise_dirname)/tftp/main.cf";
      "input[time]" string => "$(this.promise_dirname)/time/main.cf";
    #   "input[uaf2]" string => "$(this.promise_dirname)/uaf2/main.cf";
    #   "input[uaf2_users]" string => "$(this.promise_dirname)/uaf2/user_management.cf";
    #   "input[users]" string => "$(this.promise_dirname)/users/main.cf";
    #   "input[user_config]" string => "$(this.promise_dirname)/users/user_config.cf";
      "input[web_server]" string => "$(this.promise_dirname)/web_server/main.cf";

    #OLD LDAP CONFIGURATION IS NO LONGER USED. NOW REPLACED WITH SSSD/AD CONFIG
    #"input[ldap]" string => "$(this.promise_dirname)/users/ldap.cf";
      
    #enable_manage_emacs_config::
      #"input[emacs_config]" string => "$(this.promise_dirname)/emacs_config/main.cf";
      #"input[emacs_config_settings]" string => "$(this.promise_dirname)/emacs_config/settings.cf";
      #"input[report_pl]" string => "$(this.promise_dirname)/cf_report/main.cf";
      
    #enable_manage_sysctl::
      #"input[sysctl]" string => "$(this.promise_dirname)/sysctl/main.cf";

    any::
      "inputs"
        slist => getvalues(input);
}

body file control
{
      inputs => { @(manage_main_file_control.inputs) };
}

bundle agent manage_main
# @description: break down overall management by machine type as defined in host_data.json file
{

  classes:

      "NO_MACHINE_TYPE" not => "os_node|os_test_cluster|os_test_minimal_cluster|minimal_server|server|workstation|laptop";
      
  methods:

    ## DEFINE MACHINE TYPE
    os_test_cluster::
      "test VM cluster within openstack" usebundle => manage_os_test_cluster;

    # os_test_minimal_cluster::
    #   "test VM clusters within openstack with minimal configuration"
    #   usebundle => manage_os_test_minimal_cluster;

    # os_node::
    #   "all physical undercloud nodes within openstack" usebundle => manage_os_node_host;

    minimal_server::
      "legacy infrastructure servers with minimal management" usebundle => manage_minimal_server_host;

    server::
      "all isolated/legacy physical servers and VMs" usebundle => manage_server_host;

    # workstation::
    #   "all isolated physical workstations and desktops" usebundle => manage_workstation_host;

    # laptop::
    #   "all isolated physical laptops and mobile devices" usebundle => manage_laptop_host;

  reports:

    NO_MACHINE_TYPE::
      "ALERT: No machine type found for host $(sys.host). Ensure host is configured in host_data.cf";
}

###################################

bundle agent manage_minimal_server_host
{
# Description: legacy servers manually set up by Tom with own networking and firewall rules!!
# ONLY use for your legacy infrastructure servers
      
  methods:

      "configure login motd" usebundle => config_login_banner;
      "turn on sshd server"  usebundle => sshd_server("on");

      # "manage root password" usebundle => manage_root_passwd,
      #   comment => "add root password hash for new hosts by running the cf-pwhash.sh script";
      
    # install_software.!NO_INSTALLS::
    #   "package management"   usebundle => manage_packages;

    # file_server.uaf2_legacy::
    #   "manage uaf2 users (CAREFUL)" usebundle => uaf2_user_management;
         
    testing::
      # insert bundles here for testing hosts only
}

###################################

bundle agent manage_server_host
{
# Description: general server management bundle
# Uncomment or add bundle calls as you wish CFE to manage more services
# remember to also uncomment/add the required input file above!

  methods:

      "configure login motd" usebundle => config_login_banner;
      "configure login defaults" usebundle => config_login_defs;
      "configure timezone"       usebundle => config_timezone;
      "turn on mail send-only"   usebundle => mail_server("on");
      "turn on sshd server"      usebundle => sshd_server("on");

      # "manage root password" usebundle => manage_root_passwd,
      #   comment => "add root password hash for new hosts by running the cf-pwhash.sh script";

      # "system/admin user management" usebundle => manage_sys_users;
      
    # !uaf2_client|!uaf2_legacy::
    #   "standard user management" usebundle => manage_users;

    # (testing|research).install_software.!NO_INSTALLS::
    #   "repository management" usebundle => manage_repositories;

    # install_software.!NO_INSTALLS::
    #   "package management" usebundle => manage_packages;

    any::
      # "configure rc.local for autostart at boot" usebundle => config_rc_local;

      # "configure_firewall" usebundle => config_iptables;
      # "use_custom_network_interfaces" usebundle => config_net_interfaces;
      # "configure_hosts_file" usebundle => config_hosts_file;

    # emacs_server::
    #   "install and configure emacs as a service if defined in custom packages" usebundle => emacs_server("on");

    # tftp_server::
    #   "install and configure tftp server if defined in custom packages" usebundle => config_tftp_server;

    # uaf2_client::
    #   "install and configure tom's uaf2_client if defined in custom packages" usebundle => install_uaf2_client;
      
    # uaf2_client.run_uaf2_client::
    #   "when called by cron_scheduler, run uaf2 client" usebundle => run_uaf2_client;

    # manage_user_configuration::
    #   "user config files defined in user_configuration within host_data.json" usebundle => manage_user_configurations;
         
    # reboot_allowed::
    #   "check if a reboot is required after upgrades only if rebooting is allowed via cron_scheduler"
    # 	usebundle => reboot_required;

    testing::
      # insert bundles here for testing hosts only
}

###################################

bundle agent manage_os_test_cluster
{
# Description: test cluster management bundle - guacamole gateway cluster on openstack
# NOTE: all openstack nodes and tenant hosts handle their own networking and firewall rules!!
# YOU WILL NEED TO IMPLEMENT NETWORK/FIREWALL CONFIGURATION WHEN MIGRATING OFF OPENSTACK CLOUD
      
  methods:

    ## ALL HOST GLOBAL CONFIGURATION
    any::
      "configure login motd"     usebundle => config_login_banner;
      "configure login defaults" usebundle => config_login_defs;
      "configure timezone"       usebundle => config_timezone;
      "turn on mail send-only"   usebundle => mail_server("on");
      "turn on sshd server"      usebundle => sshd_server("on");

#       "ensure ssh host keys"     usebundle => ensure_ssh_host_keys("$(classify_host.host_purpose)"),
#         comment => "all nodes should share the same ssh host keys for ballast access";
      
#     install_software.!NO_INSTALLS::
#       "repository management"    usebundle => manage_repositories;
#       "package management"       usebundle => manage_packages;

      
#     ## DEFINE ROLE SUBSETS
    guac_gateway::
      # "admin user management"       usebundle => manage_sys_users;
      # "turn on ballast service"     usebundle => ballast_server("on_with_metrics");
      "turn on apache web service"  usebundle => web_server("on");
      "turn on guacamole service"   usebundle => guacamole_server("on");
      # "turn on fail2ban for guac"   usebundle => fail2ban_server("on");
      # "ballast client management"   usebundle => manage_ballast_client;

#     ssh_bastion.!uaf2_client::
#       "admin user management"       usebundle => manage_sys_users;
#       # "turn on ballast service"     usebundle => ballast_server("on");
#       "turn on fail2ban for ssh"    usebundle => fail2ban_server("on");
#       "ballast client management"   usebundle => manage_ballast_client;

#     ssh_bastion.uaf2_client::
#       "uaf2 user management"        usebundle => install_uaf2_client,
#       	comment => "install and configure tom's uaf2_client if defined as authentication method in host_data";
#       "mount emcity nfs shares"     usebundle => autofs("on");
#       "turn on fail2ban for ssh"    usebundle => fail2ban_server("on");
#       "ballast client management"   usebundle => manage_ballast_client;

#     cluster_node.!uaf2_client::
#       "admin user management"       usebundle => manage_sys_users;
#       "standard user management"    usebundle => manage_users;
#       "ballast agent management"    usebundle => manage_ballast_agent;

#     cluster_node.uaf2_client::
#       "uaf2 user management"        usebundle => install_uaf2_client,
#       	comment => "install and configure tom's uaf2_client if defined as authentication method in host_data";
#       "join host to ad domain"      usebundle => join_host_to_ad;
#       "mount emcity nfs shares"     usebundle => autofs("on");
#       "turn on xrdp remote access"  usebundle => xrdp("on");
#       "ballast agent management"    usebundle => manage_ballast_agent;
      
#     ## SYSTEM CONTROL AND SCHEDULED TASKS

#      cluster_node.reboot_node_now.!no_restarts::
#       "DANGEROUS: auto reboot/reset cluster nodes each night in splayed time as defined in the scheduler"
#  	usebundle => reboot_with_warning("10", "CFEngine: nightly reboot of this node will occur shortly! Save your work and reconnect after reboot.");
      
    # reboot_allowed::
    #   "check if a reboot is required after upgrades only if rebooting is allowed via cron_scheduler"
    # 	usebundle => reboot_required;

#     uaf2_client.run_uaf2_client::
#       "when called by cron_scheduler, run uaf2 client" usebundle => run_uaf2_client;

    testing::
      # insert bundles here for testing hosts only

}

###################################

# bundle agent manage_os_test_minimal_cluster
# {
# # NOTE: all openstack nodes and tenant hosts handle their own networking and firewall rules!!
# # ONLY USE THIS BUNDLE IN CLUSTERS DESIGNED FOR STUDENTS TO HAVE ROOT ACCESS IN TEACHING EXERCISES
      
#   methods:

#     ## ALL HOST GLOBAL CONFIGURATION
#     any::
#       "configure login motd"     usebundle => config_login_banner;
#       "configure login defaults" usebundle => config_login_defs;
#       "configure timezone"       usebundle => config_timezone;
#       "turn on sshd server"      usebundle => sshd_server("on");

#       "ensure ssh host keys"     usebundle => ensure_ssh_host_keys("$(classify_host.host_purpose)"),
#         comment => "all nodes should share the same ssh host keys for ballast access";

#     install_software.!NO_INSTALLS::
#       "repository management"    usebundle => manage_repositories;
#       "package management"       usebundle => manage_packages;

#     guac_gateway::
#       "turn on ballast service"     usebundle => ballast_server("on_with_metrics");
#       "turn on guacamole service"   usebundle => guacamole_server("on");
#       "turn on apache web service"  usebundle => web_server("on");
#       "ballast client management"   usebundle => manage_ballast_client;

#       # Need to autoset ballast_server depending on if cluster is full_access or ssh_only
#     ssh_bastion.!uaf2_client::
#       "turn on mail send-only"   usebundle => mail_server("on");
#       "admin user management"    usebundle => manage_sys_users;
#       "standard user management" usebundle => manage_users;
#       "turn on fail2ban for ssh" usebundle => fail2ban_server("on");
#       "ballast client manage"    usebundle => manage_ballast_client;

#       # "standard user management" usebundle => manage_users;
#       "manage root password"     usebundle => manage_root_passwd,
#         comment => "add root password hash for new hosts by manually running the cf-pwhash.sh script";

#     ssh_bastion.uaf2_client::
#       "uaf2 user management"     usebundle => install_uaf2_client,
#       	comment => "install and configure tom's uaf2_client if defined as authentication method in host_data";
#       "mount emcity nfs shares"  usebundle => autofs("on");
#       # "turn on ballast service"  usebundle => ballast_server("on");
#       "turn on fail2ban for ssh" usebundle => fail2ban_server("on");
#       "ballast client manage"    usebundle => manage_ballast_client;

#       "manage root password"     usebundle => manage_root_passwd,
#         comment => "add root password hash for new hosts by manually running the cf-pwhash.sh script";

#     cluster_node::
#       "ballast agent management" usebundle => manage_ballast_agent;

# }
###################################

# bundle agent manage_os_node_host
# {
# # NOTE: all openstack nodes and tenant hosts handle their own networking and firewall rules!! 
      
#   methods:

#       "configure login motd" usebundle => config_login_banner;
#       "turn on sshd server"  usebundle => sshd_server("on");

#       "manage root password" usebundle => manage_root_passwd,
#         comment => "add root password hash for new hosts by running the cf-pwhash.sh script";
      
#       "system/admin user management" usebundle => manage_sys_users;

#     install_software.!NO_INSTALLS::
#       "package management" usebundle => manage_packages;

#     manage_user_configuration::
#       "user config files defined in user_configuration within host_data.json" usebundle => manage_user_configurations;
         
#     testing::
#       # insert bundles here for testing hosts only
# }
