###############################################################################
#
#   manage/ssh/main.cf - EECS ssh/sshd configuration
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################

#PRO TIP:
# better to describe the state you are in than the state you want to
# obtain. Because when reading the policy to restart it can be nice to
# know why your restarting, instead of restarting because someone said restart.


######################################################################
# Public entry points: sshd_server(on) OR sshd_server(off)
#                      ensure_ssh_authorized_keys(user)
######################################################################

# NOTES for future development of configuration:
# 1. currently the sshd -t -f (and similarly the visudo -c -f) validation check on cached file runs every time.
# 2. if we ever implement a centralized tripwire hash checking of essential system files, then look at defining a set of classes to only run the template expansion and validation checks if either the config variables/template changes OR if tripwire policy alerts that /etc/ssh/sshd_config (or /etc/sudoers) file has been modified on the host. This enhancement then allows for alert/logging of intrusion detection and automated self-healing of host, but without these continuous validation checks occuring.

# bundle agent sshd_server
bundle agent sshd_server(state)
# @description: installs and configures sshd server with defined configuration using mustache template
# NOTE: uses the CFE service state on/off for enabling configuration!!
{
  vars:      
      "sshd_exec" string => "/usr/sbin/sshd";

  classes:
      # DEFINE SERVER STATES
      # "on"  expression => "any";
      "on"  expression => strcmp("$(state)","on");
      "off" expression => strcmp("$(state)","off");

      "sshd_exists"
	expression => fileexists( "$(sshd_exec)" );

  methods:

    off.sshd_exists::
      "ensure service is stopped if sshd_server is off"
      	usebundle => standard_services( "sshd", "stop" ),
      	classes => if_ok("sshd_server_off");

    ## ENSURE SERVICES ARE RUNNING AND CONFIGURED
    on.sshd_exists::
      "ensure service is running if sshd_server is on"
      	usebundle => standard_services( "sshd", "start" ),
      	classes => if_ok("sshd_server_on");

      "generate all sshd server variables"  usebundle => sshd_server_vars;

      "copy sshd_config file from mustache template and validate config"
    	usebundle => config_sshd_server( "sshd_server_vars" ),
        classes => results("bundle", "sshd_config");

      "copy ssh_config file from mustache template"
    	usebundle => config_ssh_client( "sshd_server_vars" ),
        classes => results("bundle", "ssh_config");
      
    on.sshd_config_repaired::
      "restart sshd service after server configuration changes"
      	usebundle => standard_services( "sshd", "restart" ),
      	classes => if_ok("sshd_server_restart");

    ## INSTALL ALL SOFTWARE FOR SSHD SERVER
    on.install_software::
      "generate all sshd server variables"  usebundle => sshd_server_vars;

      "install dependent packages"
    	usebundle => package_latest("$(sshd_server_vars.dependent_packages)"),
        classes => results("bundle", "dependent_packages_install");

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_ssh)::
      "=== $(this.bundle) ===";

      "sshd server is not installed on this host"
        ifvarclass => "!sshd_exists";
      "sshd server is turned off"
        ifvarclass => "sshd_server_off";
      "sshd server is turned on and running"
        ifvarclass => "sshd_server_on";
      "sshd server restarted due to configuration change"
        ifvarclass => "sshd_server_restart";
      "$(sshd_server_vars.dependent_packages) installed"
        ifvarclass => "dependent_packages_install_repaired";
}

######################################################################

bundle agent sshd_server_vars
{
  vars:

    ## INSTALL PARAMETERS FOR ALL SOFTWARE
    debian::
      "dependent_packages" slist => { "openssh-server", "openssh-client", },
        comment => "set of packages required for server";

    ## FILE PARAMETERS
    any::
      "sshd_config_file" string => "/etc/ssh/sshd_config";
      "sshd_config_template" string => "$(this.promise_dirname)/data/sshd_config.mustache";      
      "sshd_config_cache" string => "$(sys.workdir)/state/security/sshd_config";
      "ssh_config_file" string => "/etc/ssh/ssh_config";
      "ssh_config_template" string => "$(this.promise_dirname)/data/ssh_config.mustache";

    ## SSHD_CONFIG: NETWORKING
    any::
      "sshd[Port]"                                    string => "22";
      "sshd[Protocol]"                                string => "2";
      "sshd[ClientAliveInterval]"                     string => "120";
      "sshd[TCPKeepAlive]"                            string => "yes";
      "sshd[UseDNS]"                                  string => "no";

    ## SSHD_CONFIG: AUTHENTICATION
    any::
      # DEPRECIATED IN SSH 7.4 "sshd[RSAAuthentication]"                       string => "yes";
      "sshd[PubkeyAuthentication]"                    string => "yes";
      "sshd[ChallengeResponseAuthentication]"         string => "no";
      "sshd[HostbasedAuthentication]"                 string => "no";

    !ssh_no_password_access::
      "sshd[PasswordAuthentication]"                  string => "yes";
      
    ssh_no_password_access::
      "sshd[PasswordAuthentication]"                  string => "no",
      comment => "set this custom security class in host_data";

    ## SSHD_CONFIG: SECURITY
    any::
      "sshd[UsePAM]"                                  string => "yes";
      "sshd[StrictModes]"                             string => "yes";
      "sshd[PermitRootLogin]"                         string => "no";
      "sshd[PermitEmptyPasswords]"                    string => "no";
      # DEPRECIATED IN SSH 7.6 "sshd[UsePrivilegeSeparation]"                  string => "sandbox";
      "sshd[ChrootDirectory]"                         string => "none";

    ## SSHD_CONFIG: MISC OPTIONS
    any::
      "sshd[AllowAgentForwarding]"                    string => "no";
      "sshd[AllowTcpForwarding]"                      string => "yes";
      "sshd[X11Forwarding]"                           string => "yes"; 
      "sshd[X11DisplayOffset]"                        string => "10";
     
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
}

######################################################################

bundle agent config_sshd_server(params)
# @description: create cache file and then configure /etc/ssh/sshd_config if cache file passes validation check
{
  vars:  
      "config_file" string => "$($(params).sshd_config_file)";
      "config_cache" string => "$($(params).sshd_config_cache)";
      "config_cache_dir" string => dirname( "$($(params).sshd_config_cache)" );

      "sshd_chk_cmd" string => "/usr/sbin/sshd -t -f ",
      comment => "-t = config validation test-mode -q = quiet mode -f = sshd_config file location";

  classes:
      "have_cached_config"
	expression => fileexists( $(config_cache) );

      "sshd_check_passed"
        expression => returnszero( "$(sshd_chk_cmd) $(config_cache)", "useshell" ),
        ifvarclass => "have_cached_config";

      "sshd_check_failed"
        not => returnszero( "$(sshd_chk_cmd) $(config_cache)", "useshell" ),
	ifvarclass => "have_cached_config";
       
  files:
      "$(config_cache_dir)/."
	create => "true",
        comment => "ensure the cache directory exists";

      "$(config_cache)"
        create => "true",
	perms => mog("644","root", "root"),
        template_method => "mustache",
        edit_template => "$($(params).sshd_config_template)",
	# action => if_elapsed("60"),
        # classes => results("bundle", "config_cache"),
        comment => "expand config file to cache using template in this promise directory";

    have_cached_config.sshd_check_passed::
      "$(config_file)"
      	copy_from => local_dcp( "$(config_cache)" ),
      	perms => mog( "444","root","root" ),
        classes => results("bundle", "config_file"),
      	comment => "copy config file from local staging cache and ensure correct permissions ONLY if validated";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_ssh)::
      "=== $(this.bundle) ===";

      "cached sshd_config passed validation check"
	ifvarclass => "sshd_check_passed";
      "cached sshd_config failed validation check and will not be copied to $(config_file)"
	ifvarclass => "sshd_check_failed";

      "$(config_file) copied to system"
	ifvarclass => "config_file_repaired";
      "$(config_file) exists on system"
	ifvarclass => "config_file_kept";
}

########################################################

bundle agent config_ssh_client(params)
# @description: configure /etc/ssh/ssh_config
{
  vars:  
      "config_file" string => "$($(params).ssh_config_file)";

  classes:
      # "have_cached_config"
      # 	expression => fileexists( $(config_file) );

  files:
      "$(config_file)"
        create => "true",
	perms => mog("644","root", "root"),
        template_method => "mustache",
        edit_template => "$($(params).ssh_config_template)",
	# action => if_elapsed("60"),
        classes => results("bundle", "config_file"),
        comment => "expand config file using template in this promise directory";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_ssh)::
      "=== $(this.bundle) ===";

      "$(config_file) copied to system"
	ifvarclass => "config_file_repaired";
      "$(config_file) exists on system"
	ifvarclass => "config_file_kept";
}

########################################################

bundle common ssh_settings
{
  vars:
      "authorized_keys_dist"
        string => "/srv/cfengine/configs/ssh_authorized_keys/",
        comment => "server location where agents look for each user ssh authorized_keys file.";
      "authorized_keys_cache"
        string => "$(sys.workdir)/state/ssh_key_cache/",
              comment => "local directory where agents cache the user ssh authorized_keys file
        (for offline enforcement).";
}

########################################################

bundle agent ensure_ssh_host_keys(host)
# @description: ensure ssh host key files are deployed for specified host
{
  vars:
      "system_ssh_dir" string => "/etc/ssh";

      "host_keys_tarball" string =>"$(host)_host_keys.tar.gz";
      "host_keys_dir" string =>"$(host)_host_keys";

      "install_server" string => "$(sys.policy_hub)";
      "host_keys_dist" string => "$(ssh_settings.authorized_keys_dist)/$(host_keys_tarball)";
      "host_keys_cache" string => "$(ssh_settings.authorized_keys_cache)/$(host_keys_dir)";
      "host_keys_cache_dir" string => "$(ssh_settings.authorized_keys_cache)";

    # redhat.!scientific::
    #   "restorecon_cmd" string => "/usr/sbin/restorecon -R ",
    #   comment => "-R = recursive";
      
  classes:
      "have_cached_host_keys"
	expression => fileexists( "$(host_keys_cache)/." );
      
  methods:

    !have_cached_host_keys::
      "download and expand host keys tarball"
    	usebundle => install_tarball_v2( "$(host_keys_dist)", "$(install_server)", "$(host_keys_cache_dir)" );
        # classes => results("bundle", "install_tarball");

  files:
      "$(host_keys_cache_dir)/."
    	create => "true",
        comment => "ensure the cache directory exists";

    have_cached_host_keys::
      "$(system_ssh_dir)"
    	copy_from => local_dcp( "$(host_keys_cache)" ),
    	perms => og( "root","root" ),
        depth_search => recurse("inf"),
        classes => results("bundle", "host_keys_files"),
    	comment => "copy host_key files from local staging cache and ensure root ownership";

  # commands:
  #   redhat.!scientific::
  #     "$(restorecon_cmd) $(user_ssh_dir)"
  #       classes => results("bundle", "restorecon"),
  #       comment => "if redhat system run SELinux restorecon on user .ssh dir to allow for public key authentication",
  #     	ifvarclass => "auth_keys_file_repaired";
  
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_ssh)::
      "=== $(this.bundle) ===";
      "host_keys_cache found at $(host_keys_cache)"
        ifvarclass => "have_cached_host_keys";

      "WARNING: host_keys_cache not found at $(host_keys_cache)"
        ifvarclass => "!have_cached_host_keys";

      "ssh host keys copied for $(host)"
	ifvarclass => "host_keys_files_repaired";

      "ssh host keys exist for $(host)"
	ifvarclass => "host_keys_files_kept";

      # "SELinux restorecon ran on $(user_ssh_dir)"
      # 	ifvarclass => "restorecon_repaired";

}

########################################################

bundle agent ensure_user_ssh_authorized_keys(user, group, user_home)
# @description: ensure user specific ssh authorized_keys files are deployed
{
  vars:
      "user_ssh_dir" string => "$(user_home)/.ssh";
      "user_auth_keys_file" string => "$(user_home)/.ssh/authorized_keys";

      "auth_keys_dist" string => "$(ssh_settings.authorized_keys_dist)/$(user)/authorized_keys";
      "auth_keys_cache" string => "$(ssh_settings.authorized_keys_cache)/$(user)_authorized_keys";
      "auth_keys_cache_dir" string => "$(ssh_settings.authorized_keys_cache)";

    redhat.!scientific::
      "restorecon_cmd" string => "/usr/sbin/restorecon -R ",
      comment => "-R = recursive";
      
  classes:
      "user_home_exists"
	expression => fileexists( "$(user_home)/." );

      "have_cached_auth_keys"
	expression => fileexists( "$(auth_keys_cache)" );
      
  files:
      "$(auth_keys_cache_dir)/."
    	create => "true",
        comment => "ensure the cache directory exists";

    policy_server::
      "$(auth_keys_cache)"
        perms => mo("600","root"),
        copy_from => local_dcp( $(auth_keys_dist) ),
        action => if_elapsed("60"),
        comment => "if host is policy server then perform local copy of the authorized_keys file for local staging";

    !policy_server::
      "$(auth_keys_cache)"
    	perms => mo("600","root"),
    	copy_from => secure_cp( $(auth_keys_dist), $(sys.policy_hub) ),
    	action => if_elapsed("60"),
    	comment => "if host is another client then perform secure remote copy of the authorized_keys file for local staging";

    user_home_exists::
      "$(user_ssh_dir)/."
    	create => "true",
    	perms => mog( "700","$(user)","$(group)" ),
    	comment => "ensure existence and correct permissions for user .ssh directory";

    user_home_exists.have_cached_auth_keys:: 
      "$(user_auth_keys_file)"
    	copy_from => local_dcp( "$(auth_keys_cache)" ),
    	perms => mog( "400","$(user)","$(group)" ),
        classes => results("bundle", "auth_keys_file"),
    	comment => "copy authorized_keys file from local staging cache and ensure correct permissions";

  commands:
    redhat.!scientific::
      "$(restorecon_cmd) $(user_ssh_dir)"
        classes => results("bundle", "restorecon"),
        comment => "if redhat system run SELinux restorecon on user .ssh dir to allow for public key authentication",
      	ifvarclass => "auth_keys_file_repaired";
  
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_ssh)::
      "=== $(this.bundle) ===";
      "auth_keys_cache found at $(auth_keys_cache)"
        ifvarclass => "have_cached_auth_keys";

      "$(user_auth_keys_file) copied for $(user)"
	ifvarclass => "auth_keys_file_repaired";

      "$(user_auth_keys_file) exists for $(user)"
	ifvarclass => "auth_keys_file_kept";

      "SELinux restorecon ran on $(user_ssh_dir)"
	ifvarclass => "restorecon_repaired";

}

########################################################
