##############################################################################
#
#   manage/guacamole/database.cf - EECS guacamole mySQL database manipulation
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################

# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,update.cf)

######################################################################
# Public entry point: 
######################################################################

# NOTES for future development of configuration:
# 1. how to get feedback from database?

bundle agent configure_guac_database
# bundle agent web_server(state)
# @description: manipulates underlying mySQL database for Guacamole server
# NOTE: uses the CFE service state on/off for enabling configuration!!
{
  vars:

      ## TESTING VARS ONLY
      # "username" string => "guacadmin";

      ## GLOBAL PARAMETERS
      "params" string => "guac_database_vars";

  methods:
      "create required variables"
        usebundle => guac_database_vars;

    # have active_hosts list from ballast_metrics bundle in ballast/main.cf
      "add all groups and connections into guacamole database"
        usebundle => guac_add_all_connections( "@(classify_host.guacamole_hosts)", "$(params)" ),
        # usebundle => guac_add_all_connections( "@(ballast_metrics.active_hosts)", "$(params)" ),
        classes => if_ok("connections_added");

    # update_user_lists.connections_added::
    connections_added::
      "import and add all users into guacamole database"
        usebundle => guac_add_all_users( "@(classify_host.guacamole_hosts)", "$(params)" );

    # any::
    #   "delete temporary sql query and insert files from cache directory after file is older than 1 day"
    #     usebundle => guac_tidy ("$($(params).sql_cache_dir)", "1" );

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_guacamole)::
      "=== $(this.bundle) ===";
}

######################################################################

bundle agent guac_database_vars
{
  vars:
    ## GLOBAL PARAMETERS FOR DATABASE
      "database" string => "guacamole_db";

    ## FILE PARAMETERS
      "sql_cache_dir" string => "$(sys.workdir)/state/mysql/";
      "create_connection_group_sql" string => "$(sys.workdir)/state/mysql/guac_create_connection_group";
      "create_connection_group_template" string => "$(this.promise_dirname)/data/create_connection_group.sql.mustache";
      "create_connection_sql" string => "$(sys.workdir)/state/mysql/guac_create_connection";
      "create_connection_template" string => "$(this.promise_dirname)/data/create_connection.sql.mustache";
      "create_user_sql" string => "$(sys.workdir)/state/mysql/guac_create_user";
      "create_user_template" string => "$(this.promise_dirname)/data/create_user.sql.mustache";
      "add_user_to_connection_sql" string => "$(sys.workdir)/state/mysql/guac_add_user_to_connection";
      "add_user_to_connection_template" string => "$(this.promise_dirname)/data/add_user_to_connection.sql.mustache";
      "add_user_as_admin_sql" string => "$(sys.workdir)/state/mysql/guac_add_user_as_admin";
      "add_user_as_admin_template" string => "$(this.promise_dirname)/data/add_user_as_admin.sql.mustache";
     
      "user_cache_dir" string => "$(sys.workdir)/state/user_lists/";
      "student_csv_fixed_file" string => "cs_ece_ee_courses_fixed.csv";
      "persistent_user_source_path" string => "/srv/user_lists/persistent_gateway_users.json";

    # development::
    #   "its_student_user_source_path" string => "/srv/cfengine/configs/user_lists/cs_ece_ee_courses_17fall_test_only.csv";
    # !development::
      # "its_student_user_source_path" string => "/srv/cfengine/configs/user_lists/cs_ece_ee_courses_CURRENT.csv";
      "its_student_user_source_path" string => "/srv/user_lists/cs_ece_ee_courses.csv";

    any::
    ## USER PARAMETERS
      "user_organization" string => "MATH";
      "admin_user_role"   string => "System Admin";
      "faculty_user_role" string => "Faculty";
      "adjunct_user_role" string => "Adjunct";
      "student_user_role" string => "Student";

      "guacamole_db_user_password" string => "NOW()",
        comment => "mySQL guacamole_db requires a password at user creation. Randomizing passwords with mySQL NOW() function for security, since users will authenticate with AD/LDAP passwords";

    ## CONNECTION GROUP PARAMETERS
      "ballast_host_alias" string => "$(global.cluster_name)";

      "ssh_group_name" string => "$(global.cluster_name)_SSH_CLI_terminal";
      "ssh_ballast_alias_name" string => "$(global.cluster_name)_SSH_CLI_next_available_node";
      "ssh_ballast_last_alias_name" string => "$(global.cluster_name)_SSH_CLI_last_connected_node";

      "rdp_group_name" string => "$(global.cluster_name)_RDP_GUI_desktop";

     ## GLOBAL PARAMETERS FOR ALL CONNECTIONS
      "username" string => "${GUAC_USERNAME}",
        comment => "Connection username with parameter token: ${GUAC_USERNAME} = username of the current Guacamole user";
      "password" string => "${GUAC_PASSWORD}",
        comment => "Connection password with parameter token: ${GUAC_PASSWORD} = password of the current Guacamole user";

      "max_connections_per_group" string => "128",
        comment => "maximum number of concurrent connections to allow to this group at any one time regardless of user
                    NULL will use the default value specified in guacamole.properties";
      "max_connections_per_user_per_group" string => "4",
        comment => "maximum number of concurrent connections to allow to this group at any one time from a single user
                    NULL will use the default value specified in guacamole.properties";

      "enable_sftp" string => "true",
          comment => "If set to true, the user will be allowed to upload or download files from the SSH server using SFTP";
	"sftp_server_alive_interval" string => "120",
          comment => "Interval in seconds at which to send keepalive packets to the SSH server for the SFTP connection. This parameter is optional. If omitted, the default of 0 will be used, disabling sending keepalive packets. The minimum value is 2";
      "sftp_root_directory" string => "/opt/homes/",
          comment => "Directory to expose to connected users via Guacamole's file browser. If omitted, the root directory will be used by default";


    ## GLOBAL PARAMETERS SPECIFIC FOR SSH CONNECTIONS
      # "max_ssh_connections_per_connection" string => "128", # for ballast direct connection (guac cannot connect to ballast)
      "max_ssh_connections_per_connection" string => "16",
        comment => "maximum number of concurrent connections to allow to this connection at any one time regardless of user
                    NULL will use the default value specified in guacamole.properties";
      "max_ssh_connections_per_user_per_connection" string => "4",
        comment => "maximum number of concurrent connections to allow to this connection at any one time from a single user
                    NULL will use the default value specified in guacamole.properties";
      
      "ssh_port" string => "22",
        comment => "port the SSH server is listening on. If not specified, default of 22 will be used";
      "ssh_server_alive_interval" string => "120",
          comment => "By default the SSH client does not send keepalive requests to the server. This parameter allows you to configure the the interval in seconds at which the client connection sends keepalive packets to the server. The default is 0, which disables sending the packets. The minimum value is 2";
      "ssh_color_scheme" string => "white-black",
        comment => "color scheme to use for the terminal emulator used by SSH connections
                    options: black-white, gray-black, green-black, white-black";
      "ssh_font_name" string => "monospace",
        comment => "name of the font to use. If not specified, default of monospace will be used";
      "ssh_font_size" string => "12",
        comment => "size of the font to use, in points. If not specified, default of 12 will be used";
      "ssh_command" string => "",
        comment => "DISABLED IN TEMPLATE: command to execute over the SSH session.
                    If not specified, the SSH session will use the user's default shell";

	"ssh_connection_weight" string => "1",
	  comment => "DISABLED IN TEMPLATE: The weight for a connection, used for applying weighted load balancing algorithms when connections are part of a BALANCING group.Integer value, where values 1 or greater weight the connection relative to other connections in that group, and values below 1 cause the connection to be disabled in the group. If NULL, the connection will be assigned a default weight of 1";
      "ssh_failover_only" string => "false",
       comment => "DISABLED IN TEMPLATE: Whether this connection should be used for failover situations only, also known as a hot spare. If this column is set to TRUE or 1, this connection will be used only when another connection within the same BALANCING connection group has failed due to an error within the remote desktop";

     ## GLOBAL PARAMETERS SPECIFIC FOR RDP CONNECTIONS
      "max_rdp_connections_per_connection" string => "4",
        comment => "maximum number of concurrent connections to allow to this connection at any one time regardless of user
                    NULL will use the default value specified in guacamole.properties";
      "max_rdp_connections_per_user_per_connection" string => "1",
        comment => "maximum number of concurrent connections to allow to this connection at any one time from a single user
                    NULL will use the default value specified in guacamole.properties";

      "rdp_port" string => "3389",
        comment => "The port the RDP server is listening on. If not specified, default of 3389 will be used";
      "rdp_security" string => "rdp",
        comment => "security mode to use for the RDP connection. This mode dictates how data will be encrypted and what type of authentication will be performed";
      "rdp_domain" string => "",
        comment => "DISABLED IN TEMPLATE: domain to use when attempting authentication, if any";
      "rdp_color_depth" string => "",
        comment => "DISABLED IN TEMPLATE: color depth to request in bits-per-pixel: must be 8, 16, or 24";
      "rdp_width" string => "",
        comment => "DISABLED IN TEMPLATE: width of the display to request in pixels.
                    If not specified, the width of the connecting client display will be used";
      "rdp_height" string => "",
        comment => "DISABLED IN TEMPLATE: height of the display to request in pixels.
                    If not specified, the height of the connecting client display will be used";
      "rdp_dpi" string => "",
        comment => "DISABLED IN TEMPLATE: desired effective resolution of the client display in DPI.
                    If not specified, resolution and size of the client display will be used together to determine, heuristically, an appropriate resolution for the RDP session";
      "rdp_resize_method" string => "reconnect",
        comment => "method to use to update the RDP server when the width or height of the client display changes. If not specified, no action will be taken when the client display changes size. options: display-update, reconnect";

      "rdp_sftp_directory" string => "",
        comment => "DISABLED IN TEMPLATE: directory to upload files to if they are simply dragged and dropped, and thus otherwise lack a specific upload location. If not specified, default upload location of the SSH server providing SFTP will be used";
      
      "rdp_command" string => "",
        comment => "DISABLED IN TEMPLATE: full path to the program to run immediately upon connecting.
                    In guacamole_db this parameter is called initial-program";

      "rdp_enable_printing" string => "true",
        comment => "when true, RDP users can print to a virtual printer that sends a PDF containing the document printed to the Guacamole client";

      "rdp_connection_weight" string => "1",
	  comment => "DISABLED IN TEMPLATE: The weight for a connection, used for applying weighted load balancing algorithms when connections are part of a BALANCING group.Integer value, where values 1 or greater weight the connection relative to other connections in that group, and values below 1 cause the connection to be disabled in the group. If NULL, the connection will be assigned a default weight of 1";
      "rdp_failover_only" string => "false",
        comment => "DISABLED IN TEMPLATE: Whether this connection should be used for failover situations only, also known as a hot spare. If this column is set to TRUE or 1, this connection will be used only when another connection within the same BALANCING connection group has failed due to an error within the remote desktop";
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
}

######################################################################

bundle agent guac_add_all_connections(guac_hosts, params)
# @description: create all connection groups and coonections
{
  vars:
      
  methods:

      # DEPRECIATED: USING SINGLE CONNECTION DIRECTLY TO BALLAST INSTEAD!
      "create an SSH load-balanced root connection group with session affinity=true(1)"
        usebundle => guac_create_connection_group( "$($(params).ssh_group_name)", "BALANCING", "", "1", "$(params)" ),
        classes => if_ok("ssh_group_created");

      "create an RDP load-balanced root connection group with session affinity=true(1)"
      	usebundle => guac_create_connection_group( "$($(params).rdp_group_name)", "BALANCING", "", "1", "$(params)" ),
        classes => if_ok("rdp_group_created");

    ssh_group_created::
      "create SSH connections to hosts within SSH load-balanced group"
      	usebundle => guac_create_connection( "$(global.cluster_name)_SSH_$(guac_hosts)", "$(guac_hosts)",
					     "ssh", "$($(params).ssh_group_name)", "$(params)" );

    rdp_group_created::
      "create RDP connections to hosts within RDP load-balanced group"
      	usebundle => guac_create_connection( "$(global.cluster_name)_RDP_$(guac_hosts)", "$(guac_hosts)",
					     "rdp", "$($(params).rdp_group_name)", "$(params)" );
      
}

######################################################################

bundle agent guac_add_all_users(guac_hosts, params)
# @description create users in database and add connection permissions to each user
{
  vars:

  methods:
      "import JSON and CSV data for all persistent users and students enrolled in EECS classes"
        usebundle => import_user_data( "$(params)" ),
        classes => if_ok("users_imported");

    users_imported::
    ## ADMIN/SYSTEM USERS
      "create each admin user from persistent user json file"
      	usebundle => guac_create_user(
    	  "$(import_user_data.admin_users)",
    	  "$(import_user_data.admin_data[$(import_user_data.admin_users)][fullname])",
    	  "$(import_user_data.admin_data[$(import_user_data.admin_users)][email])",
    	  "$($(params).user_organization)",
          "$($(params).admin_user_role)",
	  "$($(params).guacamole_db_user_password)",			       
          "$(params)" );
        # classes => results("bundle", "admin_user");

      # "add each admin user to SSH ballast alias connection"
      #   usebundle => guac_add_user_to_connection( "connection", "$($(params).ssh_ballast_alias_name)",
      #     "$(import_user_data.admin_users)", "$(params)" );

      # "add each admin user to SSH ballast last host alias connection"
      #   usebundle => guac_add_user_to_connection( "connection", "$($(params).ssh_ballast_last_alias_name)",
      #     "$(import_user_data.admin_users)", "$(params)" );

      "add each admin user to SSH load-balanced connection group"
      	usebundle => guac_add_user_to_connection( "group", "$($(params).ssh_group_name)",
          "$(import_user_data.admin_users)", "$(params)" );

      "add each admin user to RDP load-balanced connection group"
      	usebundle => guac_add_user_to_connection( "group", "$($(params).rdp_group_name)",
      "$(import_user_data.admin_users)", "$(params)" );

      "add each admin user to have administer permissions into guacamole system"
      	usebundle => guac_add_user_as_admin( "$(import_user_data.admin_users)", "$(params)" );

    ## FACULTY USERS
      "create each faculty user from persistent user json file"
      	usebundle => guac_create_user(
    	  "$(import_user_data.faculty_users)",
    	  "$(import_user_data.faculty_data[$(import_user_data.faculty_users)][fullname])",
    	  "$(import_user_data.faculty_data[$(import_user_data.faculty_users)][email])",
    	  "$($(params).user_organization)",
      	  "$($(params).faculty_user_role)",
	  "$($(params).guacamole_db_user_password)",			       
          "$(params)" );
        # classes => results("bundle", "faculty_user");

      "add each faculty user to SSH load-balanced connection group"
      	usebundle => guac_add_user_to_connection( "group", "$($(params).ssh_group_name)",
          "$(import_user_data.faculty_users)", "$(params)" );

      # "add each faculty user to SSH ballast alias connection"
      #   usebundle => guac_add_user_to_connection( "connection", "$($(params).ssh_ballast_alias_name)",
      #     "$(import_user_data.faculty_users)", "$(params)" );

      # "add each faculty user to SSH ballast last host alias connection"
      #   usebundle => guac_add_user_to_connection( "connection", "$($(params).ssh_ballast_last_alias_name)",
      #     "$(import_user_data.faculty_users)", "$(params)" );

      "add each faculty user to RDP load-balanced connection group"
      	usebundle => guac_add_user_to_connection( "group", "$($(params).rdp_group_name)",
      "$(import_user_data.faculty_users)", "$(params)" );

      ## DOES NOT SEEM LIKE WE NEED TO ADD USERS TO INDIVIDUAL CONNECTIONS WITHIN A BALANCED GROUP!!
      # "add each faculty user to each SSH load-balanced connection"
      # 	usebundle => guac_add_user_to_connection( "connection", "$($(params).ssh_group_name)_$(guac_hosts)",
      #     "$(import_user_data.faculty_users)", "$(params)" );

      # "add each faculty user to each RDP load-balanced connection"
      # 	usebundle => guac_add_user_to_connection( "connection", "$($(params).rdp_group_name)_$(guac_hosts)",
      #     "$(import_user_data.faculty_users)", "$(params)" );

    ## ADJUNCT USERS
      "create each adjunct user from persistent user json file"
      	usebundle => guac_create_user(
    	  "$(import_user_data.adjunct_users)",
    	  "$(import_user_data.adjunct_data[$(import_user_data.adjunct_users)][fullname])",
    	  "$(import_user_data.adjunct_data[$(import_user_data.adjunct_users)][email])",
    	  "$($(params).user_organization)",
      	  "$($(params).adjunct_user_role)",
	  "$($(params).guacamole_db_user_password)",			       
          "$(params)" );
        # classes => results("bundle", "adjunct_user");

      "add each adjunct user to SSH load-balanced connection group"
      	usebundle => guac_add_user_to_connection( "group", "$($(params).ssh_group_name)",
          "$(import_user_data.adjunct_users)", "$(params)" );

      # "add each adjunct user to SSH ballast alias connection"
      #   usebundle => guac_add_user_to_connection( "connection", "$($(params).ssh_ballast_alias_name)",
      #     "$(import_user_data.adjunct_users)", "$(params)" );

      # "add each adjunct user to SSH ballast last host alias connection"
      #   usebundle => guac_add_user_to_connection( "connection", "$($(params).ssh_ballast_last_alias_name)",
      #     "$(import_user_data.adjunct_users)", "$(params)" );

      "add each adjunct user to RDP load-balanced connection group"
      	usebundle => guac_add_user_to_connection( "group", "$($(params).rdp_group_name)",
      "$(import_user_data.adjunct_users)", "$(params)" );

    ## STUDENT USERS
      # "create each student user from imported CSV data (ensure mywsu_ids are lowercase as usernames)"
      # 	usebundle => guac_create_user(
      # 	  "$(import_user_data.student_data[$(import_user_data.row_index)][$(import_user_data.mywsu_col)])",
      # 	  "$(import_user_data.student_data[$(import_user_data.row_index)][$(import_user_data.fullname_col)])",
      # 	  "$(import_user_data.student_data[$(import_user_data.row_index)][$(import_user_data.email_col)])",
      # 	  "$($(params).user_organization)",
      # 	  "$($(params).student_user_role)",
      #           "$($(params).guacamole_db_user_password)",			       
      #     "$(params)");
      #   # classes => results("bundle", "student_user");

      # "add each student user to SSH load-balanced connection group"
      # 	usebundle => guac_add_user_to_connection( "group", "$($(params).ssh_group_name)",
      # 	  "$(import_user_data.student_data[$(import_user_data.row_index)][$(import_user_data.mywsu_col)])",
      #     "$(params)");

      # "add each student user to SSH ballast alias connection"
      #   usebundle => guac_add_user_to_connection( "connection", "$($(params).ssh_ballast_alias_name)",
      # 	  "$(import_user_data.student_data[$(import_user_data.row_index)][$(import_user_data.mywsu_col)])",
      #     "$(params)" );

      # "add each student user to SSH ballast last host alias connection"
      #   usebundle => guac_add_user_to_connection( "connection", "$($(params).ssh_ballast_last_alias_name)",
      # 	  "$(import_user_data.student_data[$(import_user_data.row_index)][$(import_user_data.mywsu_col)])",
      #     "$(params)" );

      # "add each student user to RDP load-balanced connection group"
      # 	usebundle => guac_add_user_to_connection( "group", "$($(params).rdp_group_name)",
      # 	  "$(import_user_data.student_data[$(import_user_data.row_index)][$(import_user_data.mywsu_col)])",
      #     "$(params)");      

      ## DOES NOT SEEM LIKE WE NEED TO ADD USERS TO INDIVIDUAL CONNECTIONS WITHIN A BALANCED GROUP!!
      # "add each student user to each SSH load-balanced connection"
      # 	usebundle => guac_add_user_to_connection( "connection", "$($(params).ssh_group_name)_$(guac_hosts)",
      # 	  "$(import_user_data.student_data[$(import_user_data.row_index)][$(import_user_data.mywsu_col)])",
      #     "$(params)");

      # "add each student user to each RDP load-balanced connection"
      # 	usebundle => guac_add_user_to_connection( "connection", "$($(params).rdp_group_name)_$(guac_hosts)",
      # 	  "$(import_user_data.student_data[$(import_user_data.row_index)][$(import_user_data.mywsu_col)])",
      #     "$(params)");

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_guacamole)::
      "=== $(this.bundle) ===";

      # "mywsu_ids: $(import_user_data.student_data[$(import_user_data.row_index)][$(import_user_data.mywsu_col)])";
}

######################################################################

bundle agent guac_create_connection_group(groupname, type, parent_group, enable_session_affinity, params)
# @description: use a mustache template to add entries into required mySQL tables for a guacamole connection group "name" with "type" under a "parent group" (connection group name?), and whether "session_afinity" is required using a set of global parameters
{
  vars:
      "mysql_import_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' < ";
      "mysql_execute_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' --skip-column-names -e ";

      "mysql_group_query" string => " \"SELECT connection_group_id FROM guacamole_connection_group WHERE connection_group_name = '$(groupname)';\" ";
      "mysql_group_result" string => execresult("$(mysql_execute_cmd) $(mysql_group_query)","useshell");

    parent_group_defined::
      "mysql_parent_query" string => " \"SELECT connection_group_id FROM guacamole_connection_group WHERE connection_group_name='$(parent_group)';\" ";
      "mysql_parent_id_result" string => execresult("$(mysql_execute_cmd) $(mysql_parent_query)","useshell");

  classes:
      "group_does_not_exist"
	not => regcmp(".+","$(mysql_group_result)"),
        comment => "check mysql query result does not contain one or more characters";

      # "group_exists"
      # 	expression => regcmp(".*$(groupname).*","$(mysql_group_result)"),
      #   comment => "check mysql query result contains $(groupname)";

      "parent_group_not_defined"
	not => regcmp(".+","$(parent_group)"),
        comment => "check parent_group does not contain one or more characters";

      "parent_group_defined"
	expression => regcmp(".+","$(parent_group)"),
        comment => "check parent_group does contain one or more characters";

      # "parent_group_exists"
      # 	expression => regcmp(".+","$(mysql_parent_id_result)"),
      #   comment => "check mysql query result contains a value";
       
      "sql_insert_file_exists"
	expression => fileexists( "$($(params).create_connection_group_sql)_$(groupname).sql" );

  files:
    group_does_not_exist::
      "$($(params).create_connection_group_sql)_$(groupname).sql"
        create => "true",
        template_method => "mustache",
        edit_template => "$($(params).create_connection_group_template)",
        classes => results("bundle", "create_connection_group_sql"),
	comment => "expand sql insert file using template from staging cache in this promise directory
                    only if group does not already exist, and its parent group exists or it does not require a parent group";

  commands:
    sql_insert_file_exists.(create_connection_group_sql_repaired|create_connection_group_sql_kept)::
      "$(mysql_import_cmd)"
        args => "$($(params).create_connection_group_sql)_$(groupname).sql",
        contain => in_shell,
      	classes => results("bundle", "create_connection_group"),
        comment => "add connection group $(groupname) into guacamole database";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_guacamole)::
      "=== $(this.bundle) ===";
      "$(groupname) connection group created in $($(params).database)"
        ifvarclass => "create_connection_group_repaired";

      "WARNING: Not adding group. $(groupname) connection group exists in database with connection_group_id: $(mysql_group_result)"
        ifvarclass => "!group_does_not_exist";

      # "WARNING: Not adding group. $(groupname) requires parent group $(parent_group) but parent does not exist"
      #   ifvarclass => "parent_group_defined.!parent_group_exists";

      "$(groupname) connection group exists in database: $(const.n) $(mysql_group_result)"
        ifvarclass => "group_exists";
}

######################################################################

bundle agent guac_create_connection(conname, hostname, protocol, parent_group, params)
# @description: use a mustache template to add entries into required mySQL tables for a guacamole connection "name" with "host" (ip address) using "protocol" (VNC, RDP, SSH) under a "parent group" (connection group name?), using a set of global parameters
{
  vars:
      "mysql_import_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' < ";
      "mysql_execute_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' --skip-column-names -e ";

      "mysql_con_query" string => " \"SELECT connection_id FROM guacamole_connection WHERE connection_name='$(conname)';\" ";
      "mysql_con_result" string => execresult("$(mysql_execute_cmd) $(mysql_con_query)","useshell");

    parent_group_defined::
      "mysql_parent_query" string => " \"SELECT connection_group_id FROM guacamole_connection_group WHERE connection_group_name='$(parent_group)';\" ";
      "mysql_parent_id_result" string => execresult("$(mysql_execute_cmd) $(mysql_parent_query)","useshell");

  classes:      
      "ssh_connection"  expression => strcmp("$(protocol)","ssh");
      "rdp_connection"  expression => strcmp("$(protocol)","rdp");

      # "mysql_query_complete"
      #   expression => isvariable( "mysql_con_result" );
      
      # "connection_exists"
      #   expression => eval( "$(mysql_con_result) > 0", "class", "infix" ),
      #   comment => "check mysql query result does not contain one or more characters";
      "connection_does_not_exist"
      	not => regcmp(".+","$(mysql_con_result)"),
        comment => "check mysql query result does not contain one or more characters";

      "parent_group_not_defined"
	not => regcmp(".+","$(parent_group)"),
        comment => "check parent_group does not contain one or more characters";

      "parent_group_defined"
	expression => regcmp(".+","$(parent_group)"),
        comment => "check parent_group does contain one or more characters";

      # "parent_group_exists"
      # 	expression => regcmp(".+","$(mysql_parent_id_result)"),
      #   comment => "check mysql query result contains a value";
      
      "sql_insert_file_exists"
	expression => fileexists( "$($(params).create_connection_sql)_$(conname).sql" );

  files:
    connection_does_not_exist::
      "$($(params).create_connection_sql)_$(conname).sql"
        create => "true",
        template_method => "mustache",
        edit_template => "$($(params).create_connection_template)",
        classes => results("bundle", "create_connection_sql"),
      	comment => "expand sql insert file using template from staging cache in this promise directory";

  commands:
    sql_insert_file_exists.(create_connection_sql_repaired|create_connection_sql_kept)::
      "$(mysql_import_cmd)"
        args => "$($(params).create_connection_sql)_$(conname).sql",
        contain => in_shell,
      	classes => results("bundle", "create_connection"),
        comment => "add connection $(conname) into guacamole database";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_guacamole)::
      "=== $(this.bundle) ===";
      "$(conname) connection created in $($(params).database)"
        ifvarclass => "create_connection_repaired";
      
      "WARNING: Not adding connection. $(conname) connection exists in database with connection_id: $(mysql_con_result)"
        ifvarclass => "!connection_does_not_exist";

      # "WARNING: Not adding connection. $(conname) requires parent group $(parent_group) but parent does not exist"
      #   ifvarclass => "parent_group_defined.!parent_group_exists";
}

######################################################################

bundle agent guac_create_user(username, full_name, email_address, organization, role, password, params)
# @description: use a mustache template to add entries into required mySQL tables for a guacamole user with associated details and using a set of global parameters
{
  vars:
      "mysql_import_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' < ";
      "mysql_execute_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' --skip-column-names -e ";

      "mysql_user_query" string => " \"SELECT user_id FROM guacamole_user WHERE username = '$(username)';\" ";
      "mysql_user_result" string => execresult("$(mysql_execute_cmd) $(mysql_user_query)","useshell");
      
  classes:      
      "user_does_not_exist"
	not => regcmp(".+","$(mysql_user_result)"),
        comment => "check mysql query result does not contain one or more characters";
      
      "sql_insert_file_exists"
	expression => fileexists( "$($(params).create_user_sql)_$(username).sql" );

  files:
    user_does_not_exist::
      "$($(params).create_user_sql)_$(username).sql"
        create => "true",
        template_method => "mustache",
        edit_template => "$($(params).create_user_template)",
        classes => results("bundle", "create_user_sql"),
  	comment => "expand sql insert file using template from staging cache in this promise directory";

  commands:
    sql_insert_file_exists.(create_user_sql_repaired|create_user_sql_kept)::
      "$(mysql_import_cmd)"
        args => "$($(params).create_user_sql)_$(username).sql",
        contain => in_shell,
      	classes => results("bundle", "create_user"),
        comment => "add user $(username) into guacamole database";
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_guacamole)::
      "=== $(this.bundle) ===";
      "$(username) user created in $($(params).database)"
        ifvarclass => "create_user_repaired";
      
      "WARNING: Not adding user. $(username) user exists in database with user_id: $(mysql_user_result)"
        ifvarclass => "!user_does_not_exist";
}

######################################################################

bundle agent guac_add_user_to_connection(type, conname, username, params)
# @description: use a mustache template to add entries into required mySQL tables for giving a user permission to access a connection or connection group by defining type as 'connection' or 'group'
{
  vars:
      "mysql_import_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' < ";
      "mysql_execute_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' --skip-column-names -e ";

    guac_connection::
      "mysql_con_query" string => " \"SELECT guacamole_connection_permission.* FROM guacamole_connection_permission JOIN guacamole_user ON (guacamole_user.user_id = guacamole_connection_permission.user_id) JOIN guacamole_connection ON (guacamole_connection.connection_id=guacamole_connection_permission.connection_id) WHERE username='$(username)' AND connection_name='$(conname)';\" ";
    guac_group::
      "mysql_perm_query" string => " \"SELECT guacamole_connection_group_permission.* FROM guacamole_connection_group_permission JOIN guacamole_user ON (guacamole_user.user_id = guacamole_connection_group_permission.user_id) JOIN guacamole_connection_group ON (guacamole_connection_group.connection_group_id=guacamole_connection_group_permission.connection_group_id) WHERE username='$(username)' AND connection_group_name='$(conname)';\" ";

    guac_connection|guac_group::
      "mysql_perm_result" string => execresult("$(mysql_execute_cmd) $(mysql_perm_query)","useshell");

  classes:
      "guac_connection"  expression => strcmp("$(type)","connection");
      "guac_group"  expression => strcmp("$(type)","group");

      "permission_does_not_exist"
	not => regcmp(".+","$(mysql_perm_result)"),
        comment => "check mysql query result does not contain one or more characters";
      
      "sql_insert_file_exists"
	expression => fileexists( "$($(params).add_user_to_connection_sql)_$(username)_$(conname).sql" );

  files:
    permission_does_not_exist::
      "$($(params).add_user_to_connection_sql)_$(username)_$(conname).sql"
        create => "true",
        template_method => "mustache",
        edit_template => "$($(params).add_user_to_connection_template)",
        classes => results("bundle", "add_user_to_connection_sql"),
	comment => "expand sql insert file using template from staging cache in this promise directory";

  commands:
    sql_insert_file_exists.(add_user_to_connection_sql_repaired|add_user_to_connection_sql_kept)::
      "$(mysql_import_cmd)"
        args => "$($(params).add_user_to_connection_sql)_$(username)_$(conname).sql",
        contain => in_shell,
      	classes => results("bundle", "add_user_to_connection"),
        comment => "give user permission to access connection or group $(conname) into guacamole database";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_guacamole)::
      "=== $(this.bundle) ===";
      "$(username) given READ access to $(conname) connection"
        ifvarclass => "guac_connection.add_user_to_connection_repaired";
      "$(username) given READ access to $(conname) connection group"
        ifvarclass => "guac_group.add_user_to_connection_repaired";
      
      "ERROR: type of '$(type)' found. Type must be defined as 'connection' or 'group'"
        ifvarclass => "!guac_connection.!guac_group";      
      "WARNING: Not adding connection permission. $(username) and $(conname) permission exists in database: $(mysql_perm_result)"
        ifvarclass => "!permission_does_not_exist";
}

######################################################################

bundle agent guac_add_user_as_admin(username, params)
# @description: use a mustache template to add entries into required mySQL tables for giving a user permission to fully administer the entire guacamole system
# USE THIS BUNDLE WISELY!
{
  vars:
      "mysql_import_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' < ";
      "mysql_execute_cmd" string => "/usr/bin/mysql -u root --database='$($(params).database)' --skip-column-names -e ";

      "mysql_perm_query" string => " \"SELECT guacamole_system_permission.* FROM guacamole_system_permission JOIN guacamole_user ON (guacamole_user.user_id = guacamole_system_permission.user_id) WHERE username='$(username)';\" ";

      "mysql_perm_result" string => execresult("$(mysql_execute_cmd) $(mysql_perm_query)","useshell");

  classes:
      "permission_does_not_exist"
	not => regcmp(".+","$(mysql_perm_result)"),
        comment => "check mysql query result does not contain one or more characters";
      
      "sql_insert_file_exists"
	expression => fileexists( "$($(params).add_user_as_admin_sql)_$(username).sql" );

  files:
    permission_does_not_exist::
      "$($(params).add_user_as_admin_sql)_$(username).sql"
        create => "true",
        template_method => "mustache",
        edit_template => "$($(params).add_user_as_admin_template)",
        classes => results("bundle", "add_user_as_admin_sql"),
	comment => "expand sql insert file using template from staging cache in this promise directory";

  commands:
    sql_insert_file_exists.(add_user_as_admin_sql_repaired|add_user_as_admin_sql_kept)::
      "$(mysql_import_cmd)"
        args => "$($(params).add_user_as_admin_sql)_$(username).sql",
        contain => in_shell,
      	classes => results("bundle", "add_user_as_admin"),
        comment => "give user permission to access entire guac system as admin into guacamole database";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_guacamole)::
      "=== $(this.bundle) ===";
      "$(username) given ADMIN access to guacamole database"
        ifvarclass => "guac_connection.add_user_as_admin_repaired";
      
      "WARNING: Not adding admin permission. $(username) admin permission exists in database: $(mysql_perm_result)"
        ifvarclass => "!permission_does_not_exist";
}

######################################################################

# bundle agent import_user_data
bundle agent import_user_data(params)
# @description: pulls in ITS .csv source file as per the file sent for uaf2 integration
# Note: for readcsv function, CSV file must have ^M (DOS) EOL terminators (CRLF = /r/n) as per RFC 4180
# This bundle uses a perl command to convert the ITS source file from /n to /r/n at end of lines 
{
  vars:
      # "params" string => "guac_database_vars";
      
    ## CSV DEFINED COLUMNS FOR ITS STUDENT USER FILE
      "mywsu_col" string => "0";
      "fullname_col" string => "3";
      "email_col" string => "5";

    ## COMMANDS
      "perl_tolower_mywsu_cmd" string =>"perl -F, -lane '$F[$(mywsu_col)]=~s/(\w+)/lc($1)/ge; print join(\",\",@F);' ";
      "perl_crlf_fix_cmd" string => "perl -pe 's|\n|\r\n|;' ";

    ## FILES
      "persistent_user_cache" string => lastnode( "$($(params).persistent_user_source_path)", "/" );
      "student_csv_source_cache" string => lastnode( "$($(params).its_student_user_source_path)", "/" );
      "student_csv_fixed_file" string => "$($(params).student_csv_fixed_file)";

    ## GENERATE USER DATA STRUCTURES
    persistent_user_cache_exists::
      "persistent_user_data" data => readjson( "$($(params).user_cache_dir)/$(persistent_user_cache)", 1M),
        comment => "pull in data from cached persistent user json file";
      "json_str_persistent_user_data" string => format("%S", "persistent_user_data");

      "admin_data" data => mergedata( "persistent_user_data[admins]" ),
        comment => "create data subset of admin users from all persistent user data";
      "admin_users" slist => getindices( "admin_data" ),
        comment => "create a list of all admin user myWSU_IDs from admin_data subset";

      "faculty_data" data => mergedata( "persistent_user_data[faculty]" ),
        comment => "create data subset of faculty users from all persistent user data";
      "faculty_users" slist => getindices( "faculty_data" ),
        comment => "create a list of all faculty user myWSU_IDs from faculty_data subset";

      "adjunct_data" data => mergedata( "persistent_user_data[adjuncts]" ),
        comment => "create data subset of faculty users from all persistent user data";
      "adjunct_users" slist => getindices( "adjunct_data" ),
        comment => "create a list of all faculty user myWSU_IDs from faculty_data subset";

      # "grader_data" data => mergedata( "persistent_user_data[graders]" ),
      #   comment => "UNUSED FOR NOW: create data subset of grader users from all persistent user data";
      # "grader_user" slist => getindices( "grader_data" ),
      #   comment => "create a list of all grader user myWSU_IDs from grader_data subset";

    student_fixed_file_exists::
      "student_data" data => readcsv( "$($(params).user_cache_dir)/$(student_csv_fixed_file)" ),
        comment => "pull in data from cached student user csv file after fixes performed";
      # "csv_str_student_data" string => format("%S", "student_data");
      "row_index" slist => getindices( "student_data" ),
        comment => "create a numerical index of all rows found in student_data from underlying CSV file";

     # FAILING TO GET A SIMPLE LIST OF MYWSUIDS
     # "student_user_data" data => mergedata("student_data[$(row_index)][$(mywsu_col)]" );
     # "student_mappeddata" data => mapdata("json", '{ "$(student_user_data)": "$(this.v)" }', "student_data" );
     # "student_mappeddata" data => mapdata("json", '{ "key": "$(this.k)", "$(student_user_data)": "$(this.v)" }', "student_data" );
     # "str_student_user_data" string => format("%S", "student_mappeddata");
 
     # "student_mappeddata" data => mapdata( "json", data_regextract("^(?<mywsuid>........)", "$(this.v)"), "student_data");
     # "student_mappeddata" slist => maplist( '{ "ids": data_regextract("^(........)", "$(this.v)") }', "student_data");
      # "str_student_user_data" string => format("%S", "student_mappeddata");
      
        # action => if_elapsed("60");

  classes:
      "persistent_user_cache_exists"
	expression => fileexists( "$($(params).user_cache_dir)/$(persistent_user_cache)" );

      "student_csv_source_cache_exists"
	expression => fileexists( "$($(params).user_cache_dir)/$(student_csv_source_cache)" );

      "student_fixed_file_exists"
      	expression => fileexists( "$($(params).user_cache_dir)/$(student_csv_fixed_file)" );
      
  files:
      "$($(params).user_cache_dir)/."
	create => "true",
        comment => "ensure the user_cache directory exists";
      
      "$($(params).user_cache_dir)/$(persistent_user_cache)"
	perms => mo("400","root"),
	copy_from => secure_cp( "$($(params).persistent_user_source_path)", $(sys.policy_hub) ),
      	classes => results("bundle", "persistent_user_cache"),
	# action => if_elapsed("60"),
	comment => "perform a secure remote copy of the persistent gateway users json file";

      # "$($(params).user_cache_dir)/$(student_csv_source_cache)"
      # 	perms => mo("400","root"),
      # 	copy_from => secure_cp( "$($(params).its_student_user_source_path)", $(sys.policy_hub) ),
      # 	classes => results("bundle", "student_csv_cache"),
      # 	# action => if_elapsed("60"),
      # 	comment => "perform a secure remote copy of the ITS student user list csv file";

  # commands:
  #     ## CSV DATA MANIPULATION AND REPAIRS
  #   student_csv_source_cache_exists.(!student_fixed_file_exists|student_csv_cache_repaired)::
  #     "$(perl_tolower_mywsu_cmd) $(student_csv_source_cache)"
  #       args => "| $(perl_crlf_fix_cmd) > $(student_csv_fixed_file)",
  #       contain => in_dir_shell( "$($(params).user_cache_dir)" ),
  #     	classes => results("bundle", "student_csv_fixed"),
  #       comment => "ensure myWSU_IDs are lowercase and turn all \n in file to \r\n as required in CSV standard RFC 4180";
      
  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_guacamole)::
      "=== $(this.bundle) ===";

      "student user list csv file exists in cache"
	ifvarclass => "student_fixed_file_exists";
      
      # "csv_str_student_data: $(csv_str_student_data)";
      #"student_data = all rows/all cols: $(student_data[$(row_index)])";
      # "student_mappeddata: $(student_mappeddata)";
      # "student_users: $(student_users)";
      # "student_users_string: $(str_student_user_data)";
      # "student ids: $(students)";
      "System Admin myWSU_id = $(admin_users)";
      "Faculty myWSU_id = $(faculty_users)";
      "Adjuncts myWSU_id = $(adjunct_users)";
}

######################################################################

bundle agent test_user_list
{
  vars:
      "users" slist => getvalues( "import_user_data.student_data[][$(import_user_data.mywsu_col)]" );

  reports:
      "User: $(users)";
}

######################################################################

bundle agent guac_tidy(cdir, day)
{
# @description: delete all guac sql query files after specified days
  files:
      "$(cdir)/guac.*"
	pathtype => "regex",
        file_select => days_old( "$(day)" ),
	delete => tidy;

  reports:
   (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
      
    (DEBUG|DEBUG_guacamole)::
}

######################################################################
