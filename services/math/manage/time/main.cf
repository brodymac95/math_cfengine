##############################################################################
#
#   manage/time/main.cf - EECS time and ntp install and configuration
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################



# PROTIP: Use body file control to help make modular policy.
# "There can be only one" body common control per policy entry (promises.cf,update.cf)

# TESTING ONLY:INPUT STANDARD LIBRARY and HOST CLASSIFICATION (Remove after testing)
# body file control
# {
#       inputs => { "$(sys.libdir)/stdlib.cf",
# }

######################################################################
# Public entry point: config_timezone
######################################################################

# NOTES for future development of configuration:

bundle agent config_timezone
# @description: configure timezone using the global time_zone var and reset time from ntp server
{

  vars:
      "timezone" string => "$(global.time_zone)";
      "timezone_file" string => "/usr/share/zoneinfo/$(global.time_zone)";
      # "timezone" string => "US/Central";
      # "tz_file" string => "/usr/share/zoneinfo/$(timezone)";

      "debian_timezone_file" string => "/etc/timezone";
      "redhat_timezone_file" string => "/etc/sysconfig/clock";
      "localtime_file" string => "/etc/localtime";

      "ntp_server" string => "ntp1.wichita.edu";

  classes:
       "timezone_exists" expression => fileexists("$(timezone_file)");

  files:
    timezone_exists.(debian|gentoo)::
      "$(debian_timezone_file)"
        handle        => "tzconfig_files_etc_timezone",
        edit_defaults => empty,
        create        => "true",
        edit_line     => insert_lines("$(timezone)"),
        perms         => mog("644", "root", "root"),
        classes       => results("bundle", "timezone_file"),
        comment       => "Debian and Gentoo based systems use the /etc/timezone file";

    timezone_exists.(redhat|centos)::
      "$(redhat_timezone_file)"
        handle     => "tzconfig_files_etc_sysconfig_clock",
        create     => "true",
        edit_line  => replace_or_add("^ZONE=.*", 'ZONE="$(timezone)"'),
        perms      => mog("644", "root", "root"),
        classes    => results("bundle", "timezone_file"),
        comment    => "Redhat systems use /etc/sysconfig/clock for the Time and Date Properties Tool
                       (system-config-date), and editing it does not change the system timezone.";
      
    timezone_exists.linux::
      "$(localtime_file)"
        handle            => "tzconfig_files_etc_localtime",
        copy_from         => local_cp( "$(timezone_file)" ),
        perms             => mog("644", "root", "root"),
        classes           => results("bundle", "localtime_file"),
        # move_obstructions => "true",
        comment           => "Copy the proper timezone file in place. We dont use a symlink because that might cause problems across different filesystems, it has been a bug in the past.";

  commands:
    debian.(timezone_file_repaired)::
      "/usr/sbin/dpkg-reconfigure -f noninteractive tzdata"
        action => if_elapsed("60"),
        comment => "reconfigure timezone data after updating files";
      
      "/usr/sbin/ntpdate -u $(ntp_server)"
       action => if_elapsed("60"),
       comment => "reset time using ntp after timezone update";

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";

    (DEBUG|DEBUG_time)::
      "=== $(this.bundle) ===";
      "Unable to set invalid timezone $(timezone): file $(timezone_file) does not exist."
	ifvarclass => "!timezone_exists";

      "System timezone updated to $(timezone)"
	ifvarclass => "timezone_file_repaired";
}

######################################################################
######################################################################

# bundle agent ntp
# # bundle agent ntp(state)
# # @description: NOT IMPLEMENTED YET!! install and configure the ntp service.
# # 1. look at https://docs.cfengine.com/docs/3.10/examples-example-snippets-promise-patterns-example_ntp.html
# # https://cfengine.com/learn/managing-network-time-protocol/
# # https://github.com/cfengine/design-center/blob/master/sketches/system/tzconfig/main.cf
# {
#   vars:
      
#       "ntp_exec" string => "/usr/sbin/ntp";

#   classes:
#     ## DEFINE SERVER STATES
#       # "on"  expression => "any";
#       "on"  expression => strcmp("$(state)","on");
#       "off" expression => strcmp("$(state)","off");

#       "ntp_exists"
#       	expression => fileexists( "$(ntp_exec)" );
   
#   methods:

#     off.ntp_exists::
#       "ensure ntp service is stopped if ntp bundle is off"
#       	usebundle => standard_services( "ntp", "stop" ),
#       	classes => if_ok("ntp_off");

#     ## ENSURE SERVICES ARE RUNNING AND CONFIGURED
#     on.ntp_exists::
#       "ensure ntp service is running if ntp bundle is on"
#       	usebundle => standard_services( "ntp", "start" ),
#       	classes => if_ok("ntp_on");

#       "generate all ntp variables"  usebundle => ntp_vars,
#         inherit=> "true";

#       "configure ntp files"
#       	usebundle => configure_ntp("ntp_vars"),
#         inherit=> "true",
#         classes => results("bundle", "ntp_config");

#       "install guacamole guacctl and guacget script"
#       	usebundle => install_guacctl("ntp_vars"),
#         classes => results("bundle", "install_guacctl");

#     ## RESTARTING SERVICES AFTER INSTALLATION AND CONFIGURATION
#     on.ntp_config_repaired.!NO_RESTARTS::
#       "restart ntp service if configuration changed"
#       	usebundle => standard_services( "ntp", "restart" ),
#       	classes => if_ok("ntp_restart");

#     ## INSTALL ALL SOFTWARE
#     on.install_software::
#       "generate all ntp variables"  usebundle => ntp_vars,
#         inherit=> "true";

#       "ensure dependent packages are installed"
#     	usebundle => package_latest("$(ntp_vars.dependent_packages)"),
#         classes => results("bundle", "dependent_packages_install"),
#         comment => "pull package list from ntp_vars";

#       "ensure absent packages are removed"
#     	usebundle => package_absent("$(ntp_vars.absent_packages)"),
#         classes => results("bundle", "absent_packages_remove"),
#         comment => "pull package list from ntp_vars";

#       "install guacamole guacctl and guacget script"
#       	usebundle => install_guacctl("ntp_vars"),
#         classes => results("bundle", "guacctl_install");

#   reports:
#     (inform_mode|verbose_mode)::
#       "$(this.bundle): Activated";

#     (DEBUG|DEBUG_config)::
#       "=== $(this.bundle) ===";

#       "ntp is not installed on this host"
#         ifvarclass => "!ntp_exists";
#       "ntp is turned off"
#         ifvarclass => "ntp_off";
#       "ntp is turned on and running"
#         ifvarclass => "ntp_on";
#       "ntp restarted due to configuration change"
#         ifvarclass => "ntp_restart";

#       "$(ntp_vars.dependent_packages) installed"
#         ifvarclass => "dependent_packages_install_repaired";
#       "$(ntp_vars.absent_packages) removed"
#         ifvarclass => "absent_packages_remove_repaired";
#       "guacamole guacctl installed"
#         ifvarclass => "guacctl_install_repaired";
#       "ntp configured"
#         ifvarclass => "ntp_repaired";
# }

# ######################################################################

# bundle agent ntp_vars(params)
# {
#   vars:
#     ## INSTALL/REMOVE PARAMETERS FOR ALL SOFTWARE
#     debian::
#       "dependent_packages" slist => { "ntp", "lxde", },
#         comment => "install ntp service and lxde desktop environment";

#       "absent_packages" slist => { "network-manager", "wicd", "wicd-daemon", "wicd-gtk", "python-wicd", "wireless-tools", "wpasupplicant", "lxlock", "light-locker", "xscreensaver", "xscreensaver-data", "deluge", "deluge-gtk", "deluge-common", "firefox-esr", },
#         comment => "remove all desktop/GUI-based network, screenlock, screensaver, torrent, web-browser packages from server";

#       "guacctl_download_weblink"  string => "https://raw.githubusercontent.com/apache/incubator-guacamole-server/master/bin/guacctl";


#     ## XWRAPPER CONFIGURATION
#       "xwrapper_config_file" string => "/etc/X11/Xwrapper.config";
#       "xwrapper_config_template" string => "$(this.promise_dirname)/data/xwrapper.config.mustache";

#       # "xwrapper_allowed_users" string => "console"; # default value
#       "xwrapper_allowed_users" string => "anybody"; # ntp required value

#     ## LXDE CONFGURATION
#       "lxde_autostart_file" string => "/etc/xdg/lxsession/LXDE/autostart";
#       "lxde_autostart_template" string => "$(this.promise_dirname)/data/lxde_autostart.mustache";

#       "lxde_logout_script" string => "/usr/bin/lxde-logout";
#       "lxde_logout_template" string => "$(this.promise_dirname)/data/lxde_logout.mustache";

      
#   reports:
#     (inform_mode|verbose_mode)::
#       "$(this.bundle): Activated";
# }

# ######################################################################
