###############################################################################
#
#   classification/subnet_location/main.cf - EECS subnet classification
#   Maintained: Ben Roose, ver 0.1
#
###############################################################################

bundle common classify_subnet_location
{
  vars:
      "subnet_data"
	data => readjson( "$(this.promise_dirname)/subnet_location.json", 10M );

      "subnets" slist => getindices("subnet_data");

      "subnet_nickname"
	string => "subnet_$(subnet_data[$(subnets)][subnet_nickname])",
	ifvarclass => canonify("$(subnet_data[$(subnets)][subnet_nickname])"),
	meta => { "inventory", "attribute_name=subnet nickname" };

      "location"
	string => "$(subnet_data[$(subnets)][location])",
	ifvarclass => canonify("$(subnet_data[$(subnets)][location])"),
	meta => { "inventory", "attribute_name=location" };

      "vlan"
	string => "$(subnet_data[$(subnets)][vlan])",
	ifvarclass => canonify("$(subnet_data[$(subnets)][vlan])"),
	meta => { "inventory", "attribute_name=vlan" };

      "link_type"
	string => "$(subnet_data[$(subnets)][link_type])",
	ifvarclass => canonify("$(subnet_data[$(subnets)][link_type])"),
	meta => { "inventory", "attribute_name=link_type" };

      "site"
	string => "$(subnet_data[$(subnets)][site])",
	ifvarclass => canonify("$(subnet_data[$(subnets)][site])"),
	meta => { "inventory", "attribute_name=site" };

  classes:

      "subnet_$(subnet_data[$(subnets)][subnet_nickname])"
	expression => iprange( $(subnets) ),
	meta => { "derived-from=$(subnets)"},
        comment => "We commonly refer to subnets by nickname. It could be
                    43net, or something more fuzzy like frontend_webservers,
                    this just provides a standard way to reference subnets with
                    our normal terminoligy. Whatever the nickname, we prefix
                    with 'subnet_' to clearly identify it as a subnet. We also
                    set a meta tag to associate it back to the numeric subnet.";

      "$(subnet_data[$(subnets)][location])"
	expression => iprange( $(subnets) ),
	meta => { "derived-from=$(subnets)" };

      "vlan_$(subnet_data[$(subnets)][vlan])"
	expression => iprange( $(subnets) ),
	meta => { "derived-from=$(subnets)" };

      "link_$(subnet_data[$(subnets)][link_type])"
	expression => iprange( $(subnets) ),
	meta => { "derived-from=$(subnets)" };

      "$(subnet_data[$(subnets)][site])"
	expression => iprange( $(subnets) ),
 	meta => { "derived-from=$(subnets)" };

  reports:
    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated";
      
    (DEBUG|DEBUG_classify_subnet_location)::
      "=== $(this.bundle) ===";
      "Found IP address: $(sys.ip_addresses)";
      "Found subnet nickname: subnet_$(subnet_data[$(subnets)][subnet_nickname])"
	ifvarclass => "subnet_$(subnet_data[$(subnets)][subnet_nickname])";
      "Found subnet location: $(location)";
      "Found subnet vlan: $(vlan)"
	ifvarclass => "subnet_$(subnet_data[$(subnets)][vlan])";
      "Found subnet link_type: $(link_type)"
	ifvarclass => "subnet_$(subnet_data[$(subnets)][link_type])";
      "Found subnet site: $(site)";
}
