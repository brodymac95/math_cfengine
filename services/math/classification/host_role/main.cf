###############################################################################
#
#   classification/host_role/main.cf - EECS role classifications
#   Maintained: Ben Roose, ver 0.3
#
###############################################################################

## CLASSES AND ROLES BUNDLES

bundle common classify_host
# @description: define the classifications of the host from external json file.
{
  vars:
    # Be cautious here, readjson function expects CRLF (dos) line endings per RFC4180
    "host_data"
      data => readjson("$(this.promise_dirname)/host_data.json",1M),
      comment => "We use external data for host identification so it's easier for other people or
                  automated processes to update the data.";

    "hosts" slist => getindices( host_data );

    "hosts_json_str" string => format("%S", host_data);
    	       	         # Just for printing seralized version of data container for debugging (note its JSON).

      "canonified_host" string => canonify("$(sys.uqhost)");

    # cslab_node::
    #   "canonified_host" string => canonify("cslab_node");
    # cstest_node::
    #   "canonified_host" string => canonify("cstest_node");

    any::
    "host_machine"
      string => "$(host_data[$(canonified_host)][machine])",
      ifvarclass => canonify("$(host_data[$(canonified_host)][machine])"),
      meta => { "inventory", "attribute_name=machine" };

    "host_purpose"
      string => "$(host_data[$(canonified_host)][purpose])",
      ifvarclass => canonify("$(host_data[$(canonified_host)][purpose])"),
      meta => { "inventory", "attribute_name=purpose" };

    "host_role"
      string => "$(host_data[$(canonified_host)][role])",
      ifvarclass => canonify("$(host_data[$(canonified_host)][role])"),
      meta => { "inventory", "attribute_name=role" };

    "host_owner"
      string => "$(host_data[$(canonified_host)][owner])",
      ifvarclass => canonify("$(host_data[$(canonified_host)][owner])"),
      meta => { "inventory", "attribute_name=owner" };      

    "host_authentication"
      string => "$(host_data[$(canonified_host)][authentication])",
      ifvarclass => canonify("$(host_data[$(canonified_host)][authentication])"),
      meta => { "inventory", "attribute_name=authentication" };      

    "security_rules"
      data => mergedata( "host_data[$(canonified_host)][security]" ),
      ifvarclass => isvariable("host_data[$(canonified_host)][security]"),
      comment => "create data subset of host security rules from host_data.json file";
 
    "security_rules_json_str" string => format("%S", "security_rules"),
      ifvarclass => isvariable("host_data[$(canonified_host)][security]");

#    "net_interfaces"
#      data => mergedata( "host_data[$(canonified_host)][network_interfaces]" ),
#      ifvarclass => isvariable("host_data[$(canonified_host)][network_interfaces]"),
#      comment => "create data subset of network interfaces from host_data.json file";

#    "net_interfaces_json_str" string => format("%S", "net_interfaces"),
#      ifvarclass => isvariable("host_data[$(canonified_host)][network_interfaces]");

    "wsu_users"
      data => mergedata( "host_data[$(canonified_host)][users]" ),
      ifvarclass => isvariable("host_data[$(canonified_host)][users]"),
      comment => "create data subset of users from host_data.json file";
 
    "users_json_str" string => format("%S", "wsu_users"),
      ifvarclass => isvariable("host_data[$(canonified_host)][users]");
 
    "user_list"
      slist => getindices("wsu_users"),
      ifvarclass => isvariable("host_data[$(canonified_host)][users]");

    "user_configuration"
      data => mergedata( "host_data[$(canonified_host)][user_configuration]" ),
      ifvarclass => isvariable("host_data[$(canonified_host)][user_configuration]"),
      comment => "create data subset of users with config files in /srv/cfengine/configs/ from host_data.json file";
 
    "user_configuration_json_str" string => format("%S", "user_configuration"),
      ifvarclass => isvariable("host_data[$(canonified_host)][user_configuration]");
 
    "extra_packages"
      data => mergedata( "host_data[$(canonified_host)][extra_repository_packages]" ),
      ifvarclass => isvariable("host_data[$(canonified_host)][extra_repository_packages]"),
      comment => "create data subset of extra repository packages for installation from host_data.json file";
 
    "extra_packages_json_str" string => format("%S", "extra_packages"),
      ifvarclass => isvariable("host_data[$(canonified_host)][extra_repository_packages]");

    "custom_packages"
      data => mergedata( "host_data[$(canonified_host)][custom_packages]" ),
      ifvarclass => isvariable("host_data[$(canonified_host)][custom_packages]"),
      comment => "create data subset of custom packages for installation from host_data.json file";
 
    "custom_packages_json_str" string => format("%S", "custom_packages"),
      ifvarclass => isvariable("host_data[$(canonified_host)][custom_packages]");

   "printers"
      data => mergedata( "host_data[$(canonified_host)][printers]" ),
      ifvarclass => isvariable("host_data[$(canonified_host)][printers]"),
      comment => "create data subset of printers for installation from host_data.json file";
 
    "printers_json_str" string => format("%S", "printers"),
      ifvarclass => isvariable("host_data[$(canonified_host)][printers]");

      
  classes:
      ## DEFINE CLUSTER CLASSES FOR INDIVIDUAL HOSTNAMES USING REGEX
      # "cluster_node" expression => classmatch( ".*_node.*", hardclass ),
      #   comment => "create generic cluster class on each cslab_node host";

      "dev_node" expression => classmatch( "dev_node.*", hardclass ),
        comment => "create generic cluster class on each dev_node host";

      # "cslab_node" expression => classmatch( "cslab_node.*", hardclass ),
      #   comment => "create generic cluster class on each cslab_node host";

      # "cstest_node" expression => classmatch( "cstest_node.*", hardclass ),
      #   comment => "create generic cluster class on each cstest_node host";

      # "cstest" expression => classmatch( "cstest.*", hardclass ),
      #   comment => "testing classmatch for cstesting host";

    ## DEFINE HOST SPECIFIC CLASSES
      "$(host_data[$(canonified_host)][machine])"
	expression => "$(hosts)",
	meta => { "derived-from=sys.host,hardclass and host_data file" },
	meta => { "inventory", "attribute_name=machine class" },
	comment => "Add host's specific machine type from external data file.";
      
      "$(host_data[$(canonified_host)][purpose])"
	expression => "$(hosts)",
	meta => { "derived-from=sys.host,hardclass and host_data file" },
	meta => { "inventory", "attribute_name=purpose class" },
	comment => "Add host's specific purpose from external data file.";

      "$(host_data[$(canonified_host)][role])"
	expression => "$(hosts)",
	meta => { "derived-from=sys.host,hardclass and host_data file" },
	meta => { "inventory", "attribute_name=role class" },
	comment => "Add host's specific role from external data file.";

      "$(host_data[$(canonified_host)][owner])"
	expression => "$(hosts)",
	meta => { "derived-from=sys.host,hardclass and host_data file" },
	meta => { "inventory", "attribute_name=owner class" },
	comment => "Add host's specific owner from external data file.";

      "$(host_data[$(canonified_host)][authentication])"
	expression => "$(hosts)",
	meta => { "derived-from=sys.host,hardclass and host_data file" },
	meta => { "inventory", "attribute_name=authentication class" },
	comment => "Add host's specific authentication method from external data file.";

      "$(security_rules)"
	expression => isvariable("security_rules"),
      	meta => { "derived-from=sys.host,hardclass and host_data file" },
	comment => "Add classes for all security rules if found for host from external data file.";

      "$(custom_packages)"
	expression => isvariable("custom_packages"),
      	meta => { "derived-from=sys.host,hardclass and host_data file" },
	comment => "Add classes for all custom_packages if found for host from external data file.";
      
      # "configure_interfaces"
      #   expression => isvariable("net_interfaces"),
      #   meta => { "derived-from=sys.host,hardclass and host_data file" },
      #   comment => "Add class configure_interfaces if found for host from external data file.";

      "custom_security_rules"
	expression => isvariable("security_rules"),
	meta => { "derived-from=sys.host,hardclass and host_data file" },
	comment => "Add class custom_security_rules if found for host from external data file.";

      "manage_user_configuration"
	expression => isvariable("user_configuration"),
	meta => { "derived-from=sys.host,hardclass and host_data file" },
	comment => "Add class manage_user_configuration if found for host from external data file.";

      "install_extra_packages"
	expression => isvariable("extra_packages"),
	meta => { "derived-from=sys.host,hardclass and host_data file" },
	comment => "Add class install_extra_packages if found for host from external data file.";

      "install_custom_packages"
	expression => isvariable("custom_packages"),
	meta => { "derived-from=sys.host,hardclass and host_data file" },
	comment => "Add class install_custom_packages if found for host from external data file.";

      "install_printers"
	expression => isvariable("printers"),
	meta => { "derived-from=sys.host,hardclass and host_data file" },
	comment => "Add class install_printers if found for host from external data file.";
      
  reports:

    # It's good practice to guard your reports. If you don't it will cause much
    # noise. By convention I use DEBUG and DEBUG_bundlename to guard reports so
    # that I can easily run the poilicy and get policy debug reports for either
    # the whole policy, or just a specific bundle.

    (inform_mode|verbose_mode)::
      "$(this.bundle): Activated for $(sys.host)";

    (DEBUG|DEBUG_classify_host)::
      "=== $(this.bundle) ===";
      "Found hostname: $(sys.host)";
      "Found domain: $(sys.domain)";
      "Found machine type: $(host_machine)";
      "Found purpose: $(host_purpose)";
      "Found role: $(host_role)";
      "Found owner: $(host_owner)";
      "Found authentication type: $(host_authentication)"
	ifvarclass => canonify("$(host_data[$(hosts)][authentication])");
      
      # "Found users: $(user_list)";
      
      #  "Contents of 'external file' data container: '$(hosts_json_str)'";
      #  "Contents of 'security_rules' data container: '$(security_rules_json_str)'";
      #  "Contents of 'wsu_users' data container: '$(users_json_str)'";
      #  "Contents of 'extra_packages' data container: '$(extra_packages_json_str)'";
      #  "Contents of 'custom_packages' data container: '$(custom_packages_json_str)'";
      #  "Contents of 'printers' data container: '$(printers_json_str)'";
}
